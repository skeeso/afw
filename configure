#!/usr/bin/env bash
# AFW (Arpa Firewall Wrapper) - Ubuntu 20.04 / 22.04 / 24.04
# v2.1 (2025-10-02)
# GPLv2+ — Original (C) 2016 Federick Joe P. Fajardo
# Maintainer note: tested with iptables-nft backend + ipset on focal/jammy/noble.

set -euo pipefail

# =========================
# Config (safe defaults)
# =========================
IPDENY_V4_BASE="https://www.ipdeny.com/ipblocks/data/countries"
IPDENY_V6_BASE="https://www.ipdeny.com/ipv6/ipaddresses/blocks"

# ipset tuning
MAXELEM="1048576"
HASHSIZE="65536"

# Defaults (can be overridden via flags)
DEFAULT_COUNTRIES="us,ca,de,au,jp,hk,ph,sg,il,uk"
DEFAULT_PORTS="22"                 # <-- Only TCP 22 is allowed by default
DEFAULT_BLOCKLIST="n"              # y/n
DEFAULT_IPV6="n"                   # y/n

# UI cosmetics
UTFC="\xE2\x88\x9A"  # check
UTFY="\xE2\x9D\xA4"  # heart
UTFX="\xE2\x9C\x9D"  # star
X="\x1B[01;33m"; Y="\x1B[0m"

# =========================
# Helpers
# =========================
disp_stat(){ printf "\x1B[01;34m[$UTFX]\x1B[0m %b" "$1"; }
disp_good(){ printf "\x1B[01;32m[$UTFC]\x1B[0m %b" "$1"; }
disp_errr(){ printf "\x1B[01;31m[$UTFX]\x1B[0m %b" "$1"; }
disp_noti(){ printf "\x1B[01;33m[$UTFY]\x1B[0m %b" "$1"; }

error_exit(){ disp_errr "${1:-Unknown error}\n"; exit 1; }

need_root(){
  if [[ ${EUID:-$(id -u)} -ne 0 ]]; then
    error_exit "Run as root (use sudo)."
  fi
}

usage(){
  cat <<EOF
AFW - Distro-aware firewall bootstrap (Ubuntu 20.04/22.04/24.04)

Usage: sudo bash $0 [options]

Options:
  --countries  <cc,cc,...>   CSV of ISO-3166 2-letter codes (default: ${DEFAULT_COUNTRIES})
  --ports      <p1,p2,...>   CSV of TCP ports to allow from allowed countries (default: ${DEFAULT_PORTS})
  --blocklist  <y|n>         Enable RED blocklist from ./blocklist.conf (default: ${DEFAULT_BLOCKLIST})
  --ipv6       <y|n>         Also build IPv6 sets/rules using ipdeny v6 (default: ${DEFAULT_IPV6})
  --yes                      Non-interactive (accept defaults or provided flags)
  --help                     Show this help

Examples:
  sudo bash $0 --countries ph,us,gb,au --ports 22,80,443 --blocklist y --ipv6 n --yes
  sudo bash $0  (interactive; defaults to allow TCP 22 only)
EOF
}

# =========================
# Parse flags
# =========================
COUNTRIES="${DEFAULT_COUNTRIES}"
PORTS="${DEFAULT_PORTS}"
BLOCKLIST="${DEFAULT_BLOCKLIST}"
IPV6_OPT="${DEFAULT_IPV6}"
ASSUME_Y="n"

while [[ $# -gt 0 ]]; do
  case "$1" in
    --countries) COUNTRIES="${2,,}"; shift 2;;
    --ports) PORTS="${2}"; shift 2;;
    --blocklist) BLOCKLIST="${2}"; shift 2;;
    --ipv6) IPV6_OPT="${2}"; shift 2;;
    --yes) ASSUME_Y="y"; shift;;
    --help|-h) usage; exit 0;;
    *) error_exit "Unknown option: $1 (use --help)";;
  esac
done

# =========================
# OS detection
# =========================
detect_os(){
  local id like ver codename
  if [[ -r /etc/os-release ]]; then
    # shellcheck disable=SC1091
    . /etc/os-release
    id="${ID:-}"; like="${ID_LIKE:-}"; ver="${VERSION_ID:-}"; codename="${VERSION_CODENAME:-}"
  else
    error_exit "Cannot read /etc/os-release; unsupported system."
  fi

  if [[ "${id}" != "ubuntu" && "${like:-}" != *"ubuntu"* ]]; then
    error_exit "Only Ubuntu is supported (detected: ID=${id}, LIKE=${like})."
  fi

  case "${ver}" in
    "20.04"|"22.04"|"24.04") : ;;
    *) disp_noti "Ubuntu ${ver} detected — not one of 20.04/22.04/24.04, proceeding but YMMV.\n";;
  esac

  echo "Ubuntu ${ver} ${codename}" > /tmp/afw.os
}

# =========================
# Package install (all supported Ubuntu)
# =========================
install_pkgs(){
  disp_stat "Checking/Installing required packages...\n"
  export DEBIAN_FRONTEND=noninteractive

  # iptables-nft is the default backend on modern Ubuntu; ensure persistence + ipset installed
  local pkgs=(
    curl wget cron
    iptables ipset netfilter-persistent iptables-persistent
  )

  # Update + accept Release info changes automatically (common on PPAs)
  apt-get update -y --allow-releaseinfo-change || apt-get update -y

  for p in "${pkgs[@]}"; do
    if ! dpkg -s "$p" >/dev/null 2>&1; then
      disp_stat "Installing ${p}...\n"
      apt-get install -y "$p"
    fi
  done

  # Ensure services are available
  systemctl enable netfilter-persistent >/dev/null 2>&1 || true
  disp_good "Packages are ready.\n"
}

# =========================
# Interactive prompts (optional)
# =========================
maybe_prompt(){
  if [[ "${ASSUME_Y}" == "y" ]]; then
    echo "${COUNTRIES}" > /tmp/afw.countries
    echo "${PORTS}"     > /tmp/afw.ports
    echo "${BLOCKLIST}" > /tmp/afw.blocklist
    echo "${IPV6_OPT}"  > /tmp/afw.ipv6
    return
  fi

  clear
  printf "\033[1mARPA: (AFW) Arpa Firewall Wrapper - %s\033[0m\n" "$(date)"
  printf "Operating System: %s | %s\n\n" "$(cat /tmp/afw.os)" "$(uname -srp)"

  echo "Recommended allowlist example: ${DEFAULT_COUNTRIES}"
  read -r -p "$(printf "${X}Enter country codes (CSV) [default: %s]${Y}: " "${COUNTRIES}")" _ans || true
  if [[ -n "${_ans:-}" ]]; then COUNTRIES="${_ans,,}"; fi
  echo "${COUNTRIES}" > /tmp/afw.countries

  echo
  echo "AFW will only allow access on the ports you specify from those countries."
  read -r -p "$(printf "${X}Enter allowed TCP ports (CSV) [default: %s]${Y}: " "${PORTS}")" _p || true
  if [[ -n "${_p:-}" ]]; then PORTS="${_p}"; fi
  echo "${PORTS}" > /tmp/afw.ports

  echo
  read -r -p "$(printf "${X}Enable RED blocklist from ./blocklist.conf? [y/N] (default: %s)${Y}: " "${BLOCKLIST}")" _b || true
  if [[ -n "${_b:-}" ]]; then BLOCKLIST="${_b}"; fi
  echo "${BLOCKLIST}" > /tmp/afw.blocklist

  echo
  read -r -p "$(printf "${X}Also build IPv6 sets/rules? [y/N] (default: %s)${Y}: " "${IPV6_OPT}")" _6 || true
  if [[ -n "${_6:-}" ]]; then IPV6_OPT="${_6}"; fi
  echo "${IPV6_OPT}" > /tmp/afw.ipv6
}

# =========================
# Fetch data
# =========================
TMPDIR="$(mktemp -d -t afw-XXXXXXXX)"
cleanup(){ rm -rf "${TMPDIR}"; }
trap cleanup EXIT

fetch_country_zones(){
  disp_stat "Fetching IPv4 country zones from ipdeny.com...\n"
  : > "${TMPDIR}/allowlist.v4"
  IFS=',' read -r -a ccs <<<"$(cat /tmp/afw.countries)"
  for c in "${ccs[@]}"; do
    c="${c,,}"
    [[ -z "$c" ]] && continue
    url="${IPDENY_V4_BASE}/${c}.zone"
    if curl -fsSL --connect-timeout 10 --max-time 20 "$url" -o "${TMPDIR}/${c}.v4.zone"; then
      grep -E '^[0-9]+\.[0-9]+' "${TMPDIR}/${c}.v4.zone" >> "${TMPDIR}/allowlist.v4" || true
      printf "  - %s (IPv4)\n" "$c"
    else
      disp_errr "Failed to fetch ${url}\n"
    fi
  done
  disp_good "IPv4 fetching completed. $(wc -l < "${TMPDIR}/allowlist.v4") networks.\n"

  if [[ "$(cat /tmp/afw.ipv6)" == "y" ]]; then
    disp_stat "Fetching IPv6 country zones from ipdeny.com...\n"
    : > "${TMPDIR}/allowlist.v6"
    for c in "${ccs[@]}"; do
      c="${c,,}"
      [[ -z "$c" ]] && continue
      url="${IPDENY_V6_BASE}/${c}.zone"
      if curl -fsSL --connect-timeout 10 --max-time 20 "$url" -o "${TMPDIR}/${c}.v6.zone"; then
        grep -E '^[0-9a-fA-F:]' "${TMPDIR}/${c}.v6.zone" >> "${TMPDIR}/allowlist.v6" || true
        printf "  - %s (IPv6)\n" "$c"
      else
        disp_errr "Failed to fetch ${url}\n"
      fi
    done
    disp_good "IPv6 fetching completed. $(wc -l < "${TMPDIR}/allowlist.v6") networks.\n"
  fi
}

make_blue_list(){
  : > "${TMPDIR}/blue.v4"
  ip -4 addr show scope global | awk '/inet /{print $2}' >> "${TMPDIR}/blue.v4" || true
  : > "${TMPDIR}/blue.v6"
  ip -6 addr show scope global | awk '/inet6 /{print $2}' >> "${TMPDIR}/blue.v6" || true
}

# =========================
# iptables/ipset build
# =========================
reset_tables(){
  iptables -F || true
  iptables -X || true
  if command -v ip6tables >/dev/null 2>&1; then
    ip6tables -F || true
    ip6tables -X || true
  fi
  for set in blue green red blue6 green6 red6; do
    ipset destroy "$set" 2>/dev/null || true
  done
}

create_ipsets(){
  disp_stat "Creating ipsets...\n"
  ipset create blue  hash:net family inet  hashsize "${HASHSIZE}" maxelem "${MAXELEM}" -exist
  ipset flush blue
  if [[ -s "${TMPDIR}/blue.v4" ]]; then
    while read -r net; do [[ -n "$net" ]] && ipset add blue "$net" -exist; done < "${TMPDIR}/blue.v4"
  fi

  ipset create green hash:net family inet  hashsize "${HASHSIZE}" maxelem "${MAXELEM}" -exist
  ipset flush green
  if [[ -s "${TMPDIR}/allowlist.v4" ]]; then
    # Faster load: restore format
    { echo "create green hash:net family inet hashsize ${HASHSIZE} maxelem ${MAXELEM} -exist"
      awk '{print "add green " $0}' "${TMPDIR}/allowlist.v4";
    } | ipset restore -exist
  fi

  ipset create red   hash:net family inet  hashsize "${HASHSIZE}" maxelem "${MAXELEM}" -exist
  ipset flush red
  if [[ "$(cat /tmp/afw.blocklist)" == "y" ]]; then
    if [[ -f ./blocklist.conf ]]; then
      disp_stat "Building RED blocklist (IPv4)...\n"
      : > "${TMPDIR}/blk.v4"
      while read -r url; do
        [[ -z "$url" || "$url" =~ ^# ]] && continue
        curl -fsSL --connect-timeout 10 --max-time 25 "$url" >> "${TMPDIR}/blk.raw" || true
      done < ./blocklist.conf
      grep -oE '((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\.|/)){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(/[0-9]{1,2})?' "${TMPDIR}/blk.raw" \
        | sed 's/[;,].*$//' | sed '/^$/d' | sort -u > "${TMPDIR}/blk.v4" || true
      if [[ -s "${TMPDIR}/blk.v4" ]]; then
        { echo "create red hash:net family inet hashsize ${HASHSIZE} maxelem ${MAXELEM} -exist"
          awk '{print "add red " $0}' "${TMPDIR}/blk.v4";
        } | ipset restore -exist
      fi
      disp_good "RED blocklist loaded: $(wc -l < "${TMPDIR}/blk.v4") entries.\n"
    else
      disp_noti "blocklist.conf not found; skipping RED load.\n"
    fi
  fi

  if [[ "$(cat /tmp/afw.ipv6)" == "y" ]]; then
    ipset create blue6  hash:net family inet6 hashsize "${HASHSIZE}" maxelem "${MAXELEM}" -exist
    ipset flush blue6
    if [[ -s "${TMPDIR}/blue.v6" ]]; then
      while read -r net; do [[ -n "$net" ]] && ipset add blue6 "$net" -exist; done < "${TMPDIR}/blue.v6"
    fi

    ipset create green6 hash:net family inet6 hashsize "${HASHSIZE}" maxelem "${MAXELEM}" -exist
    ipset flush green6
    if [[ -s "${TMPDIR}/allowlist.v6" ]]; then
      { echo "create green6 hash:net family inet6 hashsize ${HASHSIZE} maxelem ${MAXELEM} -exist"
        awk '{print "add green6 " $0}' "${TMPDIR}/allowlist.v6";
      } | ipset restore -exist
    fi

    ipset create red6   hash:net family inet6 hashsize "${HASHSIZE}" maxelem "${MAXELEM}" -exist
    ipset flush red6
    # (Optional) v6 blocklist sources could be added similarly if you maintain them
  fi

  disp_good "ipsets created.\n"
}

build_rules_v4(){
  local ports; ports="$(cat /tmp/afw.ports)"

  disp_stat "Building IPv4 iptables rules...\n"
  iptables -P INPUT ACCEPT
  iptables -P FORWARD DROP
  iptables -P OUTPUT ACCEPT

  iptables -F AFW 2>/dev/null || true
  iptables -X AFW 2>/dev/null || true
  iptables -N AFW

  iptables -C INPUT -j AFW 2>/dev/null || iptables -I INPUT -j AFW

  # Loopback & established
  iptables -A AFW -i lo -j ACCEPT
  iptables -A AFW -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

  # ICMP echo req/reply
  iptables -A AFW -p icmp --icmp-type echo-reply -j ACCEPT
  iptables -A AFW -p icmp --icmp-type echo-request -j ACCEPT

  # BLUE (local interfaces)
  iptables -A AFW -m set --match-set blue src -j ACCEPT

  # GREEN limited to specified TCP ports (defaults to 22 only if no override)
  iptables -A AFW -p tcp -m set --match-set green src -m multiport --dports "${ports}" -j ACCEPT

  # RED blocklist hard drop
  iptables -A AFW -m set --match-set red src -j DROP

  # Log & reject other inbound TCP SYN to closed ports
  iptables -A AFW -m limit --limit 5/min -j LOG --log-prefix "afw denied: " --log-level 7
  iptables -A AFW -p tcp -m tcp --tcp-flags SYN,RST,ACK SYN -j REJECT --reject-with icmp-port-unreachable

  # Default inbound policy: DROP (everything not accepted above)
  iptables -P INPUT DROP

  disp_good "IPv4 rules loaded.\n"

  # Persist
  mkdir -p /etc/iptables
  iptables-save > /etc/iptables/rules.v4
  systemctl restart netfilter-persistent >/dev/null 2>&1 || true
  disp_good "IPv4 rules saved to /etc/iptables/rules.v4 and persisted.\n"
}

build_rules_v6(){
  if [[ "$(cat /tmp/afw.ipv6)" != "y" ]]; then return 0; fi
  if ! command -v ip6tables >/dev/null 2>&1; then
    disp_noti "ip6tables not available; skipping IPv6 rules.\n"
    return 0
  fi

  local ports; ports="$(cat /tmp/afw.ports)"

  disp_stat "Building IPv6 iptables rules...\n"
  ip6tables -P INPUT ACCEPT
  ip6tables -P FORWARD DROP
  ip6tables -P OUTPUT ACCEPT

  ip6tables -F AFW6 2>/dev/null || true
  ip6tables -X AFW6 2>/dev/null || true
  ip6tables -N AFW6

  ip6tables -C INPUT -j AFW6 2>/dev/null || ip6tables -I INPUT -j AFW6

  ip6tables -A AFW6 -i lo -j ACCEPT
  ip6tables -A AFW6 -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
  ip6tables -A AFW6 -p ipv6-icmp -j ACCEPT

  ip6tables -A AFW6 -m set --match-set blue6 src -j ACCEPT
  ip6tables -A AFW6 -p tcp -m set --match-set green6 src -m multiport --dports "${ports}" -j ACCEPT

  if ipset list red6 >/dev/null 2>&1; then
    ip6tables -A AFW6 -m set --match-set red6 src -j DROP
  fi

  ip6tables -A AFW6 -m limit --limit 5/min -j LOG --log-prefix "afw6 denied: " --log-level 7
  ip6tables -A AFW6 -p tcp -m tcp --tcp-flags SYN,RST,ACK SYN -j REJECT

  ip6tables -P INPUT DROP

  disp_good "IPv6 rules loaded.\n"

  mkdir -p /etc/iptables
  ip6tables-save > /etc/iptables/rules.v6
  systemctl restart netfilter-persistent >/dev/null 2>&1 || true
  disp_good "IPv6 rules saved to /etc/iptables/rules.v6 and persisted.\n"
}

save_ipsets(){
  mkdir -p /etc/afw
  ipset save blue  > /etc/afw/blue.zone  || true
  ipset save green > /etc/afw/green.zone || true
  ipset save red   > /etc/afw/red.zone   || true
  if [[ "$(cat /tmp/afw.ipv6)" == "y" ]]; then
    ipset save blue6  > /etc/afw/blue6.zone  || true
    ipset save green6 > /etc/afw/green6.zone || true
    ipset save red6   > /etc/afw/red6.zone   || true
  fi
}

# =========================
# Main
# =========================
main(){
  need_root
  detect_os
  install_pkgs

  # Seed temp inputs for non-interactive path (interactive will overwrite)
  echo "${COUNTRIES}" > /tmp/afw.countries
  echo "${PORTS}"     > /tmp/afw.ports
  echo "${BLOCKLIST}" > /tmp/afw.blocklist
  echo "${IPV6_OPT}"  > /tmp/afw.ipv6

  maybe_prompt
  fetch_country_zones
  make_blue_list
  reset_tables
  create_ipsets
  build_rules_v4
  build_rules_v6
  save_ipsets

  disp_good "\nAFW completed. Default inbound allowed: TCP ${PORTS} from allowed countries (defaults to 22 only).\n"
  disp_noti  "Edit ./blocklist.conf to manage RED sources; re-run the script to apply.\n"
}

main "$@"


